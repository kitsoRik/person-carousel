@import '../config.scss';

$leftOuterType: "left-outer";
$leftFourthType: "left-fourth";
$leftThirdType: "left-third";
$leftSecondType: "left-second";
$centralType: "central";
$rightSecondType: "right-second";
$rightThirdType: "right-third";
$rightFourthType: "right-fourth";
$rightOuterType: "right-outer";

$main-card-initial: (
    'height': 730px,
    'width': 340px
);

$second-card-initial: (
    'height': 500px,
    'width': 240px,
    'offset': 115px
);

$third-card-initial: (
    'height': 350px,
    'width': 120px,
    'offset': 230px
);

$fourth-card-initial: (
    'height': 260px,
    'width': 90px,
    'offset': 340px
);

@function getMainCard($small-coef, $key) {
    @return map-get($main-card-initial, $key) * $small-coef;
}

@function getSecondCard($small-coef, $key) {
    @return map-get($second-card-initial, $key) * $small-coef;
}

@function getThirdCard($small-coef, $key) {
    @return map-get($third-card-initial, $key) * $small-coef;
}

@function getFourthCard($small-coef, $key) {
    @return map-get($fourth-card-initial, $key) * $small-coef;
}

$cover-card-gradient: (
    'from': #1b1c25,
    '29': #282937,
    'to': #505166
);

@mixin shadowForCardFactory($transition-duration, $height: 0, $transform: none) {
    &::before {
        content: '';
        width: 100%;
        height: $height;
        background: linear-gradient(0deg, rgba(0, 0, 0, 0) 0, rgba(0, 0, 0, 0.6) 100%);
        position: absolute;
        bottom: 0;
        right: 0;

        filter: blur(4px);

        transition: all $transition-duration ease;
        transform: $transform;
    }
}

@mixin anyCardProps {
    display: flex;
    justify-content: center;
    
    position: absolute;

    user-select: none;
    
}

@mixin outerCardFactory ($small-coef) {
    height: 0;
    width: 0;

    top: calc(50%);
    filter: blur(4px);
    z-index: 1;
}

@mixin leftOuterCardFactory ($small-coef, $transition-duration) {
    @include anyCardProps();
    @include shadowForCardFactory($transition-duration, 0, perspective(19px) rotateX(2deg) translate(0px, 0px) skewX(45deg));
    @include outerCardFactory($small-coef);
    
    left: calc(50% - (#{getMainCard($small-coef, 'width')} / 2) - 430px);
    transform: perspective(100px)  rotateY(-1deg);
}

@mixin rightOuterCardFactory ($small-coef, $transition-duration) {
    @include anyCardProps();
    @include shadowForCardFactory($transition-duration, 0, perspective(19px) rotateX(2deg) translate(-1, 0px) skewX(-45deg));
    @include outerCardFactory($small-coef);

    left: calc(50% + (#{getMainCard($small-coef, 'width')} / 2) + 430px);
    transform: perspective(100px) rotateY(0);
}

@mixin fourthCardFactory($multiply-coef, $small-coef) {
    height: getFourthCard($small-coef, 'height');
    width: getFourthCard($small-coef, 'width');

    top: calc(50% - #{getFourthCard($small-coef, 'height') / 2});
    filter: blur(4px);
    z-index: 2;

    &::before {
        height: 40%;
        transform: perspective(19px) rotateX(1deg) translate($multiply-coef * 56%, 118%) skewX($multiply-coef * 45deg);
    }
}

@mixin leftFourthCardFactory($small-coef,  $transition-duration) {
    @include anyCardProps();
    @include shadowForCardFactory($transition-duration);
    @include fourthCardFactory(-1, $small-coef);

    left: calc(50% - (#{getFourthCard($small-coef, 'width')} / 2) - #{getFourthCard($small-coef, 'offset') + 20px});
    transform: perspective(12px) rotateY(-1deg);
}

@mixin rightFourthCardFactory($small-coef,  $transition-duration) {
    @include anyCardProps();
    @include shadowForCardFactory($transition-duration);
    @include fourthCardFactory(1, $small-coef);

    left: calc(50% + (#{getMainCard($small-coef, 'width')} / 2) + #{getFourthCard($small-coef, 'offset') - getFourthCard($small-coef, 'width') + 30px});
    transform: perspective(12px) rotateY(1deg);
}

@mixin thirdCardFactory($isLeft, $small-coef) {
    $main-card-width: getMainCard($small-coef, 'width');

    $height: getThirdCard($small-coef, 'height');
    $width: getThirdCard($small-coef,  'width');
    $offset: getThirdCard($small-coef, 'offset');

    height: $height;
    width: $width;

    $multiply-coef: if($isLeft, -1, 1);

    top: calc(50% - #{$height / 2});

    @if($isLeft) {         
        left: calc(50% - (#{$main-card-width} / 2) - #{$offset + 20px});

        transform: perspective(15px)  rotateY(-1deg);
    }
    @else {
        left: calc(50% + (#{$main-card-width} / 2) + #{$offset - $width + 30px});

        transform: perspective(15px) rotateY(1deg);
    }

    filter: blur(2px);
        
    z-index: 3;

    &::before {
        content: '';
        width: 80%;
        height: 35%;
        transform: perspective(19px) rotateX(2deg) translate($multiply-coef * 63%, 120%) skewX($multiply-coef * 45deg)
    }
}

@mixin leftThirdCardFactory($small-coef,  $transition-duration) {
    @include anyCardProps();
    @include shadowForCardFactory($transition-duration);
    @include thirdCardFactory(true, $small-coef);
}

@mixin rightThirdCardFactory($small-coef,  $transition-duration) {
    @include anyCardProps();
    @include shadowForCardFactory($transition-duration);
    @include thirdCardFactory(false, $small-coef);
}

@mixin secondCardFactory($isLeft, $small-coef) {
    $main-card-width: getMainCard($small-coef, 'width');

    $height: getSecondCard($small-coef, 'height');
    $width: getSecondCard($small-coef, 'width');
    $offset: getSecondCard($small-coef, 'offset');

    height: $height;
    width: $width;

    $multiply-coef: if($isLeft, -1, 1);

    top: calc(50% - #{$height / 2});

    @if $isLeft {
        left: calc(50% - (#{$main-card-width} / 2) - #{$offset});
        transform: perspective(25px) rotateY(#{-1 + deg});
    }
    @else {
        left: calc(50% + (#{$main-card-width} / 2) - #{$offset});
        transform: perspective(25px) rotateY(#{1 + deg});
    }
    

    filter: blur(1px);
    
    z-index: 4;

    &::before {
        content: '';
        height: 38%;
        width: 50%;
        /// 237
        @if($isLeft) {
            transform: perspective(19px) rotateX(2deg) translate($multiply-coef * 151%, 111%) skewX($multiply-coef * 45deg)
        } @else {
            transform: perspective(19px) rotateX(2deg) translate(#{$multiply-coef * 75%}, 111%) skewX($multiply-coef * 45deg);
        }
    }
}

@mixin leftSecondCardFactory($small-coef,  $transition-duration) {
    @include anyCardProps();
    @include shadowForCardFactory($transition-duration);
    @include secondCardFactory(true, $small-coef);
}

@mixin rightSecondCardFactory($small-coef,  $transition-duration) {
    @include anyCardProps();
    @include shadowForCardFactory($transition-duration);
    @include secondCardFactory(false, $small-coef);
}

@mixin centralCardFactory($small-coef, $transition-duration) {
    @include anyCardProps();
    @include shadowForCardFactory($transition-duration);

    $main-card-width: getMainCard($small-coef, 'width');
    $height: getMainCard($small-coef, 'height');

    height: $height;
    width: $main-card-width;


    top: calc(50% - #{$height / 2});
    left: calc(50% - (#{$main-card-width} / 2));

    transform: perspective(0)  rotateY(0);

    z-index: 15;
    filter: blur(0);

    &::before {
        width: 80%;
        height: 25.61%;
        transform: perspective(19px) rotateX(2deg) translate(-10%, 110%) skewX(0deg);
    }
}


@mixin card-factory($type, $small-coef, $transition-duration) {
    transition-duration: $transition-duration;
    transition-timing-function: ease;;
    transition-property: height, width, left, top, transform, z-index, filter;

    @if $type == $leftOuterType { @include leftOuterCardFactory($small-coef, $transition-duration); }
    @if $type == $leftFourthType { @include leftFourthCardFactory($small-coef, $transition-duration); }
    @if $type == $leftThirdType { @include leftThirdCardFactory($small-coef, $transition-duration); }
    @if $type == $leftSecondType { @include leftSecondCardFactory($small-coef, $transition-duration); }
    @if $type == $centralType { @include centralCardFactory($small-coef, $transition-duration); }
    @if $type == $rightSecondType { @include rightSecondCardFactory($small-coef, $transition-duration); }
    @if $type == $rightThirdType { @include rightThirdCardFactory($small-coef, $transition-duration); }
    @if $type == $rightFourthType { @include rightFourthCardFactory($small-coef, $transition-duration); }
    @if $type == $rightOuterType { @include rightOuterCardFactory($small-coef, $transition-duration); }
}

@mixin useSizeWithCoef($coef, $transition-duration) {
    &[attr-type=left-outer] { @include card-factory($leftOuterType, $coef, $transition-duration); }
    &[attr-type=left-fourth] { @include card-factory($leftFourthType, $coef, $transition-duration); }
    &[attr-type=left-third] { @include card-factory($leftThirdType, $coef, $transition-duration); }
    &[attr-type=left-second] { @include card-factory($leftSecondType, $coef, $transition-duration); }
    &[attr-type=main] { @include card-factory($centralType, $coef, $transition-duration); }
    &[attr-type=right-second] { @include card-factory($rightSecondType, $coef, $transition-duration); }
    &[attr-type=right-third] { @include card-factory($rightThirdType, $coef, $transition-duration); }
    &[attr-type=right-fourth] { @include card-factory($rightFourthType, $coef, $transition-duration); }
    &[attr-type=right-outer] { @include card-factory($rightOuterType, $coef, $transition-duration); }
}

@mixin useSize($maxWidthScreen, $coef, $transition-duration) {
    @media screen and (max-width: #{$maxWidthScreen + px}) {
        @include useSizeWithCoef($coef, $transition-duration);
    }
}

@mixin useSizesWithConfig($transition-duration) {
    @include useSizeWithCoef(1, $transition-duration);
    @include useSize(1366, 0.7, $transition-duration);
    @include useSize(768, 0.68, $transition-duration);
    @include useSize(600, 0.42, $transition-duration);
    @include useSize(372, 0.42, $transition-duration);
}

.card {
    $transition-duration: $default-transition-duration;

    @include useSizesWithConfig($transition-duration);
    
    &[attr-slowly=true] {
        @include useSizesWithConfig(3s);
    }
}